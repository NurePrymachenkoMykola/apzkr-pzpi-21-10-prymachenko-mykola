1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої системи є 4 типи акторів: гравець, тренер, медик та адміністратор.

Основними потребами гравця є:
- Скринька повідомлень – користувач має можливість
переглядати повідомлення від членів клубу.
- Чат – дозволяє вести діалог з членом клубу.
- Кімната футболу – перегляд інструкцій на наступний матч,
тренування, а також їх розбір після кінця.
- Профіль – можливість редагувати особливу про себе
інформацію.
- Розклад – дивитись розклад матчей та тренувань.

Основними потребами тренера є:
- Скринька повідомлень – користувач має можливість
переглядати та відправляти повідомлення членам клубу.
- Кімната футболу – розміщення розбору матчей або
тренувань у зручному вигляді.
- Розклад – можливість змінювати розклад матчей та
тренувань.
- Відправляти запрошення до команди гравцям без клубів,
та видаляти їх.
- Реєструвати медика команди та звільняти його.

Основними потребами медика є:
- Скринька повідомлень – відправляти повідомлення
гравцям.
- Розробляти курс лікування гравця.

Основними потребами адміністратора є:
-	можливість повідомляти усіх клієнтів сайту щодо змінення функціоналу або правил сайту;
-	можливість змінювати вартість та послуги що надає підписка.

Діаграма прецедентів детально описує взаємодію кожної ролі користувача з системою. Цей інструмент дозволив чітко визначити функціональні потреби та особливості взаємодії різних типів користувачів із системою.


2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для розробки серверної частини системи було обрано мову програмування JavaScript та використано технологію Nest.js. За систему управління базами даних обрано MongoDB.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання.
Для тестування та документування API використовується OpenApi (Swagger), що полегшує розробку та підвищує якість API. Використання захищеного протоколу HTTPS забезпечує безпеку даних під час їх передачі.
Для реалізації аутентифікації та авторизації використовується нативний AuthGuard в Nest.js, що забезпечує гнучкий та потужний механізм для керування доступом користувачів.
Розроблений серверний застосунок, побудований за концепціями Clean Architecture, складається із кількох шарів: Presentation, Application, Domain та Infrastructure. Кожен вищий рівень є залежним від попереднього.
Архітектура серверного застосунку може бути визначена за допомогою діаграми пакетів. В додатку В наведено приклади коду серверного застосунку.


ВИСНОВКИ


У ході виконання лабораторної роботи були отримані навички з проектування клієнтської частини програмної системи, розробки сценаріїв використання Use Case. Була розроблена програмна реалізація клієнтської частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування JavaScript та фреймворку Next.js.