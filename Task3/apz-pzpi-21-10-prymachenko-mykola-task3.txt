1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ


IoT-пристрій розробленої системи після запуску видає посилання для підключення, яке необхідно вставити у мобільному додатку або на вебсайті в налаштуваннях відповідного обладнання. Після цього, за допомогою мобільного додатку або вебсайту можна надсилати запити на ІоТ пристрій.

Взаємодія пристрою з сервером представлена на діаграмі прецедентів (див. рис. 1).


2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ


При розробці системи було прийнято рішення використовувати архітектурну модель, яка поєднує принципи монолітної та модульної архітектур, щоб досягти балансу між простотою та розширюваністю. Це дозволяє їй ефективно працювати, навіть при невеликому збільшенні її складності, а також легко розширюватися за рахунок підтримки нових пристроїв без значних змін у внутрішньому коді.
Важливим аспектом є мінімізація використання постійної пам'яті для забезпечення високої продуктивності системи та зниження вимог до пристрою, на якому буде виконано систему.
Результатом цих архітектурних рішень стала UML діаграма діяльності, яка ілюструє структуру та взаємодію різних компонентів системи (див. додаток A.2).


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для розробки серверної частини системи було обрано мову програмування TypeScript та використано технологію Nest.js. За систему управління базами даних обрано MongoDB.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання.
Для тестування та документування API використовується OpenApi (Swagger), що полегшує розробку та підвищує якість API. Використання захищеного протоколу HTTPS забезпечує безпеку даних під час їх передачі.
Для реалізації аутентифікації та авторизації використовується нативний AuthGuard в Nest.js, що забезпечує гнучкий та потужний механізм для керування доступом користувачів.
Розроблений серверний застосунок, побудований за концепціями Clean Architecture, складається із кількох шарів: Presentation, Application, Domain та Infrastructure. Кожен вищий рівень є залежним від попереднього.
Архітектура серверного застосунку може бути визначена за допомогою діаграми пакетів. В додатку В наведено приклади коду серверного застосунку.


4 ОПИС РЕЗУЛЬТАТІВ ТЕСТУВАННЯ ЧАСТИНИ ПРОЕКТУ ДЛЯ ВБУДОВАНИХ СИСТЕМ


Зазначений віртуальний пристрій, з точки зору структури, є найпростішим RESTful API з такою специфікацією: GET /abort зупиняє поточний процес пивоваріння, GET /brewingstatus повертає статус поточного пивоваріння, GET /status повертає статус обладнання, POST /startbrewing починає процес варіння обраного рецепта, GET /history-count повертає поточну кількість виконаних пивоварінь на пристрої з моменту його останнього ввімкнення, GET /is-reachable використовується серверною частиною для первірки доступності пристрою за вказаним у налаштуваннях обладнання посиланням.
Для перевірки правильності роботи системи було проведено тестування. Тестування виконувалося вручну, за допомогою спеціального програмного забезпечення, а також з використання програмних підходів. У ході тестування було використано функціональність Visual Studio 2022, cпеціального програмного забезпечення Swagger, а також вбудовані можливості мови програмування C#.
Для демонстрації принципу роботи контролера з кінцевим пристроєм, був розроблений віртуальний «пристрій», що симулює поведінку обладнання для пивоваріння із вбудованою функціональністю запуску та переривання поточного процесу пивоваріння, отримання актуальної інформації про стан пивоваріння та загальний стан обладнання.


ВИСНОВКИ


Результатом виконаної лабораторної роботи є розробка програмного забезпечення для вбудованих систем.
Пристрій входить у склад програмної системи та взаємодіє з нею. Реалізоване програмне забезпечення розширює функціональність, що відповідає концепції вбудованих систем, і забезпечує ефективну взаємодію з іншими компонентами системи.